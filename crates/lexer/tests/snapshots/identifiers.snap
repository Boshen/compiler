---
source: crates/lexer/tests/lib.rs
assertion_line: 21
expression: identifiers

---
# Input

    // comment
    /* multiline comment */
    await break case catch class const continue debugger default delete do else enum export extends
false finally for function if import in instanceof new null return super switch this throw true try typeof var void while with yield
    undefined
    $ _ $a _a abc_$
    
---
# Output
[
    Token {
        kind: Comment,
        offset: 10,
        len: 10,
    },
    Token {
        kind: WhiteSpace,
        offset: 15,
        len: 5,
    },
    Token {
        kind: MultilineComment,
        offset: 38,
        len: 23,
    },
    Token {
        kind: WhiteSpace,
        offset: 43,
        len: 5,
    },
    Token {
        kind: AWAIT,
        offset: 48,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 49,
        len: 1,
    },
    Token {
        kind: BREAK,
        offset: 54,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 55,
        len: 1,
    },
    Token {
        kind: CASE,
        offset: 59,
        len: 4,
    },
    Token {
        kind: WhiteSpace,
        offset: 60,
        len: 1,
    },
    Token {
        kind: CATCH,
        offset: 65,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 66,
        len: 1,
    },
    Token {
        kind: CLASS,
        offset: 71,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 72,
        len: 1,
    },
    Token {
        kind: CONST,
        offset: 77,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 78,
        len: 1,
    },
    Token {
        kind: CONTINUE,
        offset: 86,
        len: 8,
    },
    Token {
        kind: WhiteSpace,
        offset: 87,
        len: 1,
    },
    Token {
        kind: DEBUGGER,
        offset: 95,
        len: 8,
    },
    Token {
        kind: WhiteSpace,
        offset: 96,
        len: 1,
    },
    Token {
        kind: DEFAULT,
        offset: 103,
        len: 7,
    },
    Token {
        kind: WhiteSpace,
        offset: 104,
        len: 1,
    },
    Token {
        kind: DELETE,
        offset: 110,
        len: 6,
    },
    Token {
        kind: WhiteSpace,
        offset: 111,
        len: 1,
    },
    Token {
        kind: DO,
        offset: 113,
        len: 2,
    },
    Token {
        kind: WhiteSpace,
        offset: 114,
        len: 1,
    },
    Token {
        kind: ELSE,
        offset: 118,
        len: 4,
    },
    Token {
        kind: WhiteSpace,
        offset: 119,
        len: 1,
    },
    Token {
        kind: ENUM,
        offset: 123,
        len: 4,
    },
    Token {
        kind: WhiteSpace,
        offset: 124,
        len: 1,
    },
    Token {
        kind: EXPORT,
        offset: 130,
        len: 6,
    },
    Token {
        kind: WhiteSpace,
        offset: 131,
        len: 1,
    },
    Token {
        kind: EXTENDS,
        offset: 138,
        len: 7,
    },
    Token {
        kind: WhiteSpace,
        offset: 139,
        len: 1,
    },
    Token {
        kind: FALSE,
        offset: 144,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 145,
        len: 1,
    },
    Token {
        kind: FINALLY,
        offset: 152,
        len: 7,
    },
    Token {
        kind: WhiteSpace,
        offset: 153,
        len: 1,
    },
    Token {
        kind: FOR,
        offset: 156,
        len: 3,
    },
    Token {
        kind: WhiteSpace,
        offset: 157,
        len: 1,
    },
    Token {
        kind: FUNCTION,
        offset: 165,
        len: 8,
    },
    Token {
        kind: WhiteSpace,
        offset: 166,
        len: 1,
    },
    Token {
        kind: IF,
        offset: 168,
        len: 2,
    },
    Token {
        kind: WhiteSpace,
        offset: 169,
        len: 1,
    },
    Token {
        kind: IMPORT,
        offset: 175,
        len: 6,
    },
    Token {
        kind: WhiteSpace,
        offset: 176,
        len: 1,
    },
    Token {
        kind: IN,
        offset: 178,
        len: 2,
    },
    Token {
        kind: WhiteSpace,
        offset: 179,
        len: 1,
    },
    Token {
        kind: INSTANCEOF,
        offset: 189,
        len: 10,
    },
    Token {
        kind: WhiteSpace,
        offset: 190,
        len: 1,
    },
    Token {
        kind: NEW,
        offset: 193,
        len: 3,
    },
    Token {
        kind: WhiteSpace,
        offset: 194,
        len: 1,
    },
    Token {
        kind: NULL,
        offset: 198,
        len: 4,
    },
    Token {
        kind: WhiteSpace,
        offset: 199,
        len: 1,
    },
    Token {
        kind: RETURN,
        offset: 205,
        len: 6,
    },
    Token {
        kind: WhiteSpace,
        offset: 206,
        len: 1,
    },
    Token {
        kind: SUPER,
        offset: 211,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 212,
        len: 1,
    },
    Token {
        kind: SWITCH,
        offset: 218,
        len: 6,
    },
    Token {
        kind: WhiteSpace,
        offset: 219,
        len: 1,
    },
    Token {
        kind: THIS,
        offset: 223,
        len: 4,
    },
    Token {
        kind: WhiteSpace,
        offset: 224,
        len: 1,
    },
    Token {
        kind: THROW,
        offset: 229,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 230,
        len: 1,
    },
    Token {
        kind: TRUE,
        offset: 234,
        len: 4,
    },
    Token {
        kind: WhiteSpace,
        offset: 235,
        len: 1,
    },
    Token {
        kind: TRY,
        offset: 238,
        len: 3,
    },
    Token {
        kind: WhiteSpace,
        offset: 239,
        len: 1,
    },
    Token {
        kind: TYPEOF,
        offset: 245,
        len: 6,
    },
    Token {
        kind: WhiteSpace,
        offset: 246,
        len: 1,
    },
    Token {
        kind: VAR,
        offset: 249,
        len: 3,
    },
    Token {
        kind: WhiteSpace,
        offset: 250,
        len: 1,
    },
    Token {
        kind: VOID,
        offset: 254,
        len: 4,
    },
    Token {
        kind: WhiteSpace,
        offset: 255,
        len: 1,
    },
    Token {
        kind: WHILE,
        offset: 260,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 261,
        len: 1,
    },
    Token {
        kind: WITH,
        offset: 265,
        len: 4,
    },
    Token {
        kind: WhiteSpace,
        offset: 266,
        len: 1,
    },
    Token {
        kind: YIELD,
        offset: 271,
        len: 5,
    },
    Token {
        kind: WhiteSpace,
        offset: 276,
        len: 5,
    },
    Token {
        kind: Ident,
        offset: 285,
        len: 9,
    },
    Token {
        kind: WhiteSpace,
        offset: 290,
        len: 5,
    },
    Token {
        kind: Ident,
        offset: 291,
        len: 1,
    },
    Token {
        kind: WhiteSpace,
        offset: 292,
        len: 1,
    },
    Token {
        kind: Ident,
        offset: 293,
        len: 1,
    },
    Token {
        kind: WhiteSpace,
        offset: 294,
        len: 1,
    },
    Token {
        kind: Ident,
        offset: 296,
        len: 2,
    },
    Token {
        kind: WhiteSpace,
        offset: 297,
        len: 1,
    },
    Token {
        kind: Ident,
        offset: 299,
        len: 2,
    },
    Token {
        kind: WhiteSpace,
        offset: 300,
        len: 1,
    },
    Token {
        kind: Ident,
        offset: 305,
        len: 5,
    },
    Token {
        kind: EOF,
        offset: 305,
        len: 1,
    },
]

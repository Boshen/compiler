---
source: crates/lexer/tests/lib.rs
assertion_line: 16
expression: keyword

---
# Input
await break case catch class const continue debugger default delete do else enum export extends
false finally for function if import in instanceof new null return super switch this throw true try typeof var void while with yield
undefined

---
# Output
[
    Token {
        kind: Await,
        offset: 0,
        len: 5,
    },
    Token {
        kind: Break,
        offset: 6,
        len: 5,
    },
    Token {
        kind: Case,
        offset: 12,
        len: 4,
    },
    Token {
        kind: Catch,
        offset: 17,
        len: 5,
    },
    Token {
        kind: Class,
        offset: 23,
        len: 5,
    },
    Token {
        kind: Const,
        offset: 29,
        len: 5,
    },
    Token {
        kind: Continue,
        offset: 35,
        len: 8,
    },
    Token {
        kind: Debugger,
        offset: 44,
        len: 8,
    },
    Token {
        kind: DefaulT,
        offset: 53,
        len: 7,
    },
    Token {
        kind: Delete,
        offset: 61,
        len: 6,
    },
    Token {
        kind: Do,
        offset: 68,
        len: 2,
    },
    Token {
        kind: Else,
        offset: 71,
        len: 4,
    },
    Token {
        kind: Enum,
        offset: 76,
        len: 4,
    },
    Token {
        kind: Export,
        offset: 81,
        len: 6,
    },
    Token {
        kind: Extends,
        offset: 88,
        len: 7,
    },
    Token {
        kind: False,
        offset: 96,
        len: 5,
    },
    Token {
        kind: FinallY,
        offset: 102,
        len: 7,
    },
    Token {
        kind: For,
        offset: 110,
        len: 3,
    },
    Token {
        kind: Function,
        offset: 114,
        len: 8,
    },
    Token {
        kind: If,
        offset: 123,
        len: 2,
    },
    Token {
        kind: Import,
        offset: 126,
        len: 6,
    },
    Token {
        kind: In,
        offset: 133,
        len: 2,
    },
    Token {
        kind: Instanceof,
        offset: 136,
        len: 10,
    },
    Token {
        kind: New,
        offset: 147,
        len: 3,
    },
    Token {
        kind: Null,
        offset: 151,
        len: 4,
    },
    Token {
        kind: Return,
        offset: 156,
        len: 6,
    },
    Token {
        kind: Super,
        offset: 163,
        len: 5,
    },
    Token {
        kind: Switch,
        offset: 169,
        len: 6,
    },
    Token {
        kind: This,
        offset: 176,
        len: 4,
    },
    Token {
        kind: Throw,
        offset: 181,
        len: 5,
    },
    Token {
        kind: True,
        offset: 187,
        len: 4,
    },
    Token {
        kind: Try,
        offset: 192,
        len: 3,
    },
    Token {
        kind: Typeof,
        offset: 196,
        len: 6,
    },
    Token {
        kind: Var,
        offset: 203,
        len: 3,
    },
    Token {
        kind: Void,
        offset: 207,
        len: 4,
    },
    Token {
        kind: While,
        offset: 212,
        len: 5,
    },
    Token {
        kind: With,
        offset: 218,
        len: 4,
    },
    Token {
        kind: Yield,
        offset: 223,
        len: 5,
    },
    Token {
        kind: Ident,
        offset: 229,
        len: 9,
    },
    Token {
        kind: EOF,
        offset: 238,
        len: 1,
    },
]
